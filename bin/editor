#!/bin/bash

export ENV_HOME=${ENV_HOME:-/usr/local/env/${SUDO_USER:-$USER}}
# This is very hacky and specific to my setup, either arrange to set
# it in Windows and share in WSL or set in .bash_host/* or something.
export WIN_ENV_HOME=${WIN_ENV_HOME:-"C:/Users/${USERNAME:-$USER}/partdavid-env"}

win_emacs="/mnt/c/ProgramData/chocolatey/bin/emacs.exe"
mac_emacs="/Applications/Emacs.app/Contents/MacOS/Emacs"
emacs_init="$ENV_HOME/emacs"

test -d ~/.backups || mkdir ~/.backups

if [ -x "$win_emacs" ]
then
    # We're running something like WSL, cygwin, git bash
    # Windows Emacs may need a different ENV_HOME that refers
    # to a windows path, and a `-l` argument that
    # also refers to a windows path
    emacs="$win_emacs"
    emacs_init="$WIN_ENV_HOME/emacs"
elif [ -x "$mac_emacs" ]
then
    emacs="$mac_emacs"
else
    emacs=$(which emacs)
fi

vim=$(which vim)

if [ -n "$emacs" ]
then
    echo "$emacs" -q -l "$emacs_init" "$@"
    exec "$emacs" -q -l "$emacs_init" "$@"
elif [ -n "$vim" ]
then
    echo "$vim" -u $ENV_HOME/vimrc  --cmd "set rtp^=$ENV_HOME/vim" "$@"
    exec "$vim" -u $ENV_HOME/vimrc  --cmd "set rtp^=$ENV_HOME/vim" "$@"
else
    echo vi "$@"
    exec vi "$@"
fi

